#!/bin/zsh

function lic() {
  echo 'Below are all licenses JBuild can download from GitHub:'
  curl https://api.github.com/licenses 2>/dev/null | grep key | cut -d'"' -f4 | sed 's/^/    - /'
  exit
}

echo '+------------------------------------------+'
echo '|                  JBUILD                  |'
echo '+------------------------------------------+'
echo '  A simple project generator for C/C++/CUDA '
echo ''

if [ "$1" = 'license' ]; then lic; fi

echo 'Creates a new project (with structure) in a subdirectory'
echo ''

echo ' SYNOPSIS:'
echo ' ---------'
echo ' jbuild name [-c compiler] [-o optimization level] [-s strictness]'
echo '     [-i] [-u] [-d debug flag] [-t project type] [-e extra compile flags]'
echo '     [-l linker args] [-n license] [--no-git] [--no-init-commit]'
echo '     [--no-readme]'
echo ''
echo ' only the name parameter is mandatory, all others have a default value'
echo ''
echo ' PARAMETERS:'
echo ' -----------'
echo ' -c --compiler: (default: gcc)'
echo '     Sets the compiler. This should be one of `gcc`, `g++`, or `nvcc`.'
echo '     This compiler will be used for all of preprocessing, compilation'
echo '     and linking.'
echo ''
echo ' -o --opti: (default: 0)'
echo '     Sets the optimization level. Valid values are `0`, `1`, `2`, `3`,'
echo '     `fast`, `g` and `s`. See the gcc help for more info.'
echo ''
echo ' -s --strictness: (default: warn)'
echo '     Sets the strictness (impacts the number of warnings/errors). Valid'
echo '     values are (in order least to most strict): `off`, `warn`, `extra`,'
echo '     `pedantic`. Adding `+e` to any of the options (e.g.: `warn+e`) turns'
echo '     all warnings into errors.'
echo ''
echo ' -i --install:'
echo '     Generates an install target as well (`make install`). Behaviour'
echo '     depends on the output type:'
echo '       - For executables: copies the executable to `/usr/bin`'
echo '       - For libraries (static & shared): copies the library to'
echo '           `/usr/lib/`, and the headers to `/usr/include`.'
echo '     This flag is off by default.'
echo ''
echo ' -u --uninstall:'
echo '     Generates an uninstall target as well (`make uninstall`). This also'
echo '     enables the --install flag. This target removes the files created by'
echo '     the install target.'
echo '     This flag is off by default.'
echo ''
echo ' -d --debug: '
echo '     Creates an extra target (`make debug`), which is compiled with `-D[value]`'
echo '     and `-g -O0` in addition to the other flags. The value passed has to be'
echo '     a valid C/C++ macro name.'
echo '     Debug targets are disabled by default.'
echo ''
echo ' -t --output-type: (default: exec)'
echo '     Specifies the output type (also impacts the behaviour of -i and -u).'
echo '     Valid options are `exec` (executable in bin/[name]), `lib` (static '
echo '     library in lib/lib[name].a) and so (shared library in lib/lib[name].so).'
echo ''
echo ' -e --extra-flags:'
echo '     Passes the given extra flags/arguments to the compiler for compilation.'
echo '     Contrarily to most other options, this one is stacked (all occurences'
echo '     append values).'
echo '     By default, no extra flags are passed.'
echo ''
echo ' -l --link-args:'
echo '     Passes the given extra flags/arguments to the compiler for linking.'
echo '     Contrarily to most other options, this one is stacked (all occurences'
echo '     append values). Specify all needed libraries to link here (with -l).'
echo '     By default, no extra flags are passed.'
echo ''
echo ' -n --license:'
echo '     Downloads the given license from GitHub and adds it to your project.'
echo '     Valid values to pass can be obtained by running the following command:'
echo '        `curl https://api.github.com/licenses | grep key`'
echo '     or by running `jbuild help license`.'
echo '     By default, no license is added.'
echo ''
echo ' --no-git:'
echo '     Disables the creation of a git repository.'
echo '     By default, a new repository is created in the newly created project'
echo '     directory (along with a simple, default gitignore).'
echo ''
echo ' --no-init-commit:'
echo '     Disables the (default) first commit with the following message:'
echo '        `Initial commit (using jbuild)`'
echo '     By default, the commit is created.'
echo ''
echo ' --no-readme:'
echo '     Disable generation of the default one-liner README.md.'
echo '     By default, a README.md is generated with as contents: '
echo '        `# [project name]`'
echo ''
echo ' RESULTING PROJECT STRUCTURE:'
echo ' ----------------------------'
echo ' For projects generated with `-t exec`'
echo '     .'
echo '     └── [name]/'
echo '         ├── bin/'
echo '         ├── inc/'
echo '         ├── LICENSE'
echo '         ├── Makefile'
echo '         ├── obj/'
echo '         ├── README.md'
echo '         └── src/'
echo ''
echo ' For projects generated with `-t lib` or `-t so`'
echo '     .'
echo '     └── [name]/'
echo '         ├── inc/'
echo '         ├── lib/'
echo '         ├── LICENSE'
echo '         ├── Makefile'
echo '         ├── obj/'
echo '         ├── README.md'
echo '         └── src/'
